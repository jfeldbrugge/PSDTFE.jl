var documenterSearchIndex = {"docs":
[{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The evolution of our universe can be described in Lagrangian fluid dynamics in terms of the Lagrangian map x_t(q) = q + s_t(q) mapping a point in the space of initial conditions (Lagrangian space) to a point in the current universe (Eulerian space). The displacement field s_t(q) captures the displacement of a particle starting at q in time t. Given the Lagrangian map x_t, the density field is given by ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"rho(x) = sum_q in x_t^-1(x) fracrho_u nabla x_t(q)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The Phase-Space DTFE method implements this density field, and the associated velocity fields for cosmological N-body simulations using both Delaunay tessellations and phase-space methods.","category":"page"},{"location":"theory/#The-Delaunay-Tessellation-Field-Estimator","page":"Theory","title":"The Delaunay Tessellation Field Estimator","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The DTFE method converts the current positions of the N-body particles and their velocities in to an estimate of the density and velocity fields in Eulerian space.","category":"page"},{"location":"theory/#The-Phase-Space-Delaunay-Tessellation-Field-Estimator","page":"Theory","title":"The Phase-Space Delaunay Tessellation Field Estimator","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The PS-DTFE method extends the DTFE method to phase-space.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/#PhaseSpaceDTFE.SimBox","page":"Reference","title":"PhaseSpaceDTFE.SimBox","text":"SimBox(L, Ni)\n\nSets the size and resolution of the simulation box.\n\nExamples\n\njulia> SimBox(100, 64)\nSimBox(100.0, 64)\n\n\n\n\n\n","category":"type"},{"location":"#Phase-Space-DTFE","page":"Home","title":"Phase-Space DTFE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PhaseSpaceDTFE.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jfeldbrugge/PhaseSpaceDTFE.jl","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Job Feldbrugge\nBenjamin Hertzsch","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We use the PhaseSpaceDTFE package to estimate the density and velocity fields of a GADGET-4 simulation. First, we load the data.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using JLD2, Plots, HDF5, ProgressMeter, PhaseSpaceDTFE\n\n## set up simulation box\nNi = 64\nL  = 100.\n\ndepth = 5\nsim_box = SimBox(L, Ni)   ## need this structure for estimator creation\n\n## load data \nfunction load_data(file)\n    fid = h5open(file, \"r\")\n    pos = convert.(Float64, read(fid[\"PartType1\"][\"Coordinates\"]))\n    vel = convert.(Float64, read(fid[\"PartType1\"][\"Velocities\"]))\n    ids = read(fid[\"PartType1\"][\"ParticleIDs\"])\n    time = read_attribute(fid[\"Header\"], \"Time\")\n    close(fid)\n\n    ordering = sortperm(ids)\n    return (copy(pos[:,ordering]'), copy(vel[:,ordering]'), time)\nend\n\nfunction load_mass(file)\n    f = h5open(file, \"r\")\n    read_attribute(f[\"Header\"], \"MassTable\")[2]  # particle type 1\nend\n\nm = load_mass(\"../../test/data/snapshot_000.hdf5\")\n(coords_q, _, _) = load_data(\"../../test/data/snapshot_000.hdf5\")\n(coords_x, vels, _) = load_data(\"../../test/data/snapshot_002.hdf5\")","category":"page"},{"location":"tutorial/#Delaunay-Tesselation-Field-Estimator","page":"Tutorial","title":"Delaunay Tesselation Field Estimator","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"## construct estimator\nps_dtfe = PS_DTFE_periodic(coords_x, coords_x, vels, m, depth, sim_box)\n\n# evaluate density field\nRange = 0.:0.2:100.\ndensity_field = [PhaseSpaceDTFE.density([L/2., y, z], ps_dtfe) for y in Range, z in Range]\nheatmap(Range, Range, log10.(density_field), aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), c=:grays, xlabel=\"[Mpc]\", ylabel=\"[Mpc]\")","category":"page"},{"location":"tutorial/#Phase-Space-Delaunay-Tessellation-Field-Estimator-—-basic-implementation","page":"Tutorial","title":"Phase-Space Delaunay Tessellation Field Estimator — basic implementation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"## construct estimator\nps_dtfe = PS_DTFE_periodic(coords_q, coords_x, vels, m, depth, sim_box)\n\n## if want to ignore velocities\n#ps_dtfe = PS_DTFE(coords_q, coords_x, zeros(size(v_x)[1], 3), m, depth, box)\n\nRange = 0.:0.2:100.\n\n# evaluate density field\ndensity_field = [PhaseSpaceDTFE.density([L/2., y, z], ps_dtfe) for y in Range, z in Range]\nheatmap(Range, Range, log10.(density_field), aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), c=:grays, xlabel=\"[Mpc]\", ylabel=\"[Mpc]\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The corresponding number of streams field is evaluated as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"nstreams_field = [numberOfStreams([L/2., y, z], ps_dtfe) for y in Range, z in Range]\nheatmap(Range, Range, nstreams_field, aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), clim=(1, 7), xlabel=\"[Mpc]\", ylabel=\"[Mpc]\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, the velocity field is evaluated with the velocity()-function.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"vel_field = [velocity([L/2., y, z], ps_dtfe) for y in Range, z in Range]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In multistream regions, the velocity()-function returns the velocities of the individual streams (or NaN if single_stream=true is set in the function). To obtain the stream-mass weighted summation of the velocities, call the velocitySum()-function (reducing to velocity() in single-stream regions):","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"vel_field = [velocitySum([L/2., y, z], ps_dtfe) for y in Range, z in Range]","category":"page"},{"location":"tutorial/#Phase-Space-Delaunay-Tessellation-Field-Estimator-—-subbox-implementation","page":"Tutorial","title":"Phase-Space Delaunay Tessellation Field Estimator — subbox implementation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To be added....","category":"page"}]
}
